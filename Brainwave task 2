import sqlite3
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk

# Database Setup
conn = sqlite3.connect("inventory.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    quantity INTEGER NOT NULL,
                    price REAL NOT NULL
                )''')
conn.commit()

# Functions
def add_product():
    name = name_entry.get()
    quantity = quantity_entry.get()
    price = price_entry.get()

    if name and quantity.isdigit() and price.replace('.', '', 1).isdigit():
        cursor.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)",
                       (name, int(quantity), float(price)))
        conn.commit()
        messagebox.showinfo("Success", "Product Added!")
        refresh_table()
    else:
        messagebox.showerror("Error", "Invalid Input")

def delete_product():
    selected_item = tree.focus()
    if selected_item:
        item_id = tree.item(selected_item)["values"][0]
        cursor.execute("DELETE FROM products WHERE id=?", (item_id,))
        conn.commit()
        messagebox.showinfo("Deleted", "Product Deleted!")
        refresh_table()
    else:
        messagebox.showerror("Error", "Select a Product to Delete")

def edit_product():
    selected_item = tree.focus()
    if selected_item:
        item_id = tree.item(selected_item)["values"][0]
        new_quantity = quantity_entry.get()
        new_price = price_entry.get()

        if new_quantity.isdigit() and new_price.replace('.', '', 1).isdigit():
            cursor.execute("UPDATE products SET quantity=?, price=? WHERE id=?",
                           (int(new_quantity), float(new_price), item_id))
            conn.commit()
            messagebox.showinfo("Updated", "Product Updated!")
            refresh_table()
        else:
            messagebox.showerror("Error", "Invalid Input")
    else:
        messagebox.showerror("Error", "Select a Product to Edit")

def generate_report():
    cursor.execute("SELECT name, quantity FROM products WHERE quantity < 5")
    low_stock_items = cursor.fetchall()
    report = "\n".join([f"{item[0]} - {item[1]} left" for item in low_stock_items])
    messagebox.showinfo("Low Stock Report", report if report else "All items are in stock")

def refresh_table():
    for row in tree.get_children():
        tree.delete(row)
    cursor.execute("SELECT * FROM products")
    for row in cursor.fetchall():
        tree.insert("", "end", values=row)

# GUI Setup
root = tk.Tk()
root.title("Inventory Management System")
root.geometry("600x400")

# Input Fields
tk.Label(root, text="Name").grid(row=0, column=0)
name_entry = tk.Entry(root)
name_entry.grid(row=0, column=1)

tk.Label(root, text="Quantity").grid(row=1, column=0)
quantity_entry = tk.Entry(root)
quantity_entry.grid(row=1, column=1)

tk.Label(root, text="Price").grid(row=2, column=0)
price_entry = tk.Entry(root)
price_entry.grid(row=2, column=1)

# Buttons
tk.Button(root, text="Add Product", command=add_product).grid(row=3, column=0)
tk.Button(root, text="Edit Product", command=edit_product).grid(row=3, column=1)
tk.Button(root, text="Delete Product", command=delete_product).grid(row=3, column=2)
tk.Button(root, text="Generate Report", command=generate_report).grid(row=3, column=3)

# Product List Table
columns = ("ID", "Name", "Quantity", "Price")
tree = ttk.Treeview(root, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
tree.grid(row=4, column=0, columnspan=4)

refresh_table()

root.mainloop()
